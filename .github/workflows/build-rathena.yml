name: rAthena CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_DIR: build
  ARTIFACT_NAME: rathena-binaries.tar.gz

# ==========================================
# 1️⃣ PREPARE ENVIRONMENT
# ==========================================
jobs:
  prepare:
    name: 🧰 Prepare Environment
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake mysql-client libmysqlclient-dev zlib1g-dev libssl-dev

      - name: 🗃️ Cache dependencies (CMake)
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: cmake-${{ runner.os }}-${{ hashFiles('CMakeLists.txt') }}

# ==========================================
# 2️⃣ BUILD SERVER
# ==========================================
  build:
    name: 🏗️ Build rAthena (CMake)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🧱 Configure and Build
        run: |
          mkdir -p $BUILD_DIR
          cmake -B $BUILD_DIR -DWEB_SERVER_ENABLE=ON
          cmake --build $BUILD_DIR --parallel $(nproc)
          echo "✅ Build complete"

      - name: ✅ Verify build results
        run: |
          ls -lh $BUILD_DIR/
          for bin in login-server char-server map-server web-server; do
            if [ -f "$BUILD_DIR/$bin" ]; then
              echo "✅ $bin OK"
            else
              echo "⚠️ $bin missing"
            fi
          done

      - name: 📦 Upload compiled binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rathena-binaries
          path: ${{ env.BUILD_DIR }}/*

# ==========================================
# 3️⃣ DEPLOY TO DIGITAL OCEAN
# ==========================================
  deploy:
    name: 🚀 Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: 📥 Download artifact from build
        uses: actions/download-artifact@v4
        with:
          name: rathena-binaries
          path: .

      - name: 🌍 Upload binaries via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: 22
          source: "*"
          target: /root/endless/rathena/build/
          overwrite: true

      - name: 🔄 Restart rAthena services remotely
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: 22
          timeout: 180s             # garante conexão longa
          command_timeout: 120s     # comando pode rodar até 2min
          script_stop: false        # evita interromper ao primeiro erro
          debug: true               # mostra saída detalhada
          script: |
            set -e
            cd /root/endless/rathena

            echo "🛑 Stopping existing processes..."
            pkill -f map-server || true
            pkill -f char-server || true
            pkill -f login-server || true
            pkill -f web-server || true

            echo "🚀 Starting new rAthena servers..."
            # Rodar em background absoluto sem travar a sessão SSH
            nohup ./athena-start start > restart.log 2>&1 < /dev/null & disown

            echo "⏳ Waiting 10 seconds for server boot..."
            sleep 10

            echo "🔍 Last log lines:"
            tail -n 15 restart.log || echo "No logs yet."

            echo "✅ Redeploy complete. Servers running in background!"
